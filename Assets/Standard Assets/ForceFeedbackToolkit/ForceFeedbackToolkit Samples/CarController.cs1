using UnityEngine;
using System.Collections;

// This class is repsonsible for controlling inputs to the car.
// Change this code to implement other input types, such as support for analogue input, or AI cars.
[RequireComponent (typeof (Drivetrain))]
public class CarController : MonoBehaviour {

	// Add all wheels of the car here, so brake and steering forces can be applied to them.
	public Wheel[] wheels;
	
	// A transform object which marks the car's center of gravity.
	// Cars with a higher CoG tend to tilt more in corners.
	// The further the CoG is towards the rear of the car, the more the car tends to oversteer. 
	// If this is not set, the center of mass is calculated from the colliders.
	public Transform centerOfMass;

	// A factor applied to the car's inertia tensor. 
	// Unity calculates the inertia tensor based on the car's collider shape.
	// This factor lets you scale the tensor, in order to make the car more or less dynamic.
	// A higher inertia makes the car change direction slower, which can make it easier to respond to.
	public float inertiaFactor = 1.5f;
	
	// current input state
	float brake;
	float throttle;
	float throttleInput;
	float steering;
	float lastShiftTime = -1;
	float handbrake;
		
	// cached Drivetrain reference
	Drivetrain drivetrain;
	
	// How long the car takes to shift gears
	public float shiftSpeed = 0.8f;
	

	// These values determine how fast throttle value is changed when the accelerate keys are pressed or released.
	// Getting these right is important to make the car controllable, as keyboard input does not allow analogue input.
	// There are different values for when the wheels have full traction and when there are spinning, to implement 
	// traction control schemes.
		
	// How long it takes to fully engage the throttle
	public float throttleTime = 1.0f;
	// How long it takes to fully engage the throttle 
	// when the wheels are spinning (and traction control is disabled)
	public float throttleTimeTraction = 10.0f;
	// How long it takes to fully release the throttle
	public float throttleReleaseTime = 0.5f;
	// How long it takes to fully release the throttle 
	// when the wheels are spinning.
	public float throttleReleaseTimeTraction = 0.1f;

	// Turn traction control on or off
	public bool tractionControl = true;
	
	
	// These values determine how fast steering value is changed when the steering keys are pressed or released.
	// Getting these right is important to make the car controllable, as keyboard input does not allow analogue input.
	
	// How long it takes to fully turn the steering wheel from center to full lock
	public float steerTime = 1.2f;
	// This is added to steerTime per m/s of velocity, so steering is slower when the car is moving faster.
	public float veloSteerTime = 0.1f;

	// How long it takes to fully turn the steering wheel from full lock to center
	public float steerReleaseTime = 0.6f;
	// This is added to steerReleaseTime per m/s of velocity, so steering is slower when the car is moving faster.
	public float veloSteerReleaseTime = 0f;
	// When detecting a situation where the player tries to counter steer to correct an oversteer situation,
	// steering speed will be multiplied by the difference between optimal and current steering times this 
	// factor, to make the correction easier.
	public float steerCorrectionFactor = 4.0f;
	
    //** Start FFB Changes **//
	public WheelMenu wheelMenu; 
	public bool shiftingUp = false;
	public bool shiftingDown = false;
    public float[] c = { 2.2f, -3.9f, -3.9f, -1.26f, -8.2f, 0.025f, 0f, 0.044f, -0.58f, 0.18f, 0.043f, 0.048f, -0.0035f, -0.18f, 0.14f, -1.029f, 0.27f, -1.1f }; // aligning values
    //** End FFB Changes **//

	// Used by SoundController to get average slip velo of all wheels for skid sounds.
	public float slipVelo {
		get {
			float val = 0.0f;
			foreach(Wheel w in wheels)
				val += w.slipVelo / wheels.Length;
			return val;
		}
	}

	// Initialize
	void Start () 
	{
		if (centerOfMass != null)
			rigidbody.centerOfMass = centerOfMass.localPosition;
		rigidbody.inertiaTensor *= inertiaFactor;
		drivetrain = GetComponent (typeof (Drivetrain)) as Drivetrain;

        // FFB Change ** Get wheel menu component ** //
		wheelMenu = Camera.main.GetComponent<WheelMenu>();
	}
	
	void Update () 
	{
		// Steering
		Vector3 carDir = transform.forward;
		float fVelo = rigidbody.velocity.magnitude;
		Vector3 veloDir = rigidbody.velocity * (1/fVelo);
		float angle = -Mathf.Asin(Mathf.Clamp( Vector3.Cross(veloDir, carDir).y, -1, 1));
		float optimalSteering = angle / (wheels[0].maxSteeringAngle * Mathf.Deg2Rad);
		if (fVelo < 1)
			optimalSteering = 0;


        // ** Start FFB Changes ** //
        // Replace keyboard input with DInput 

		wheelMenu.dinput.GetInput();
        float sensitivity = (.95f / (1 + 0.3f * Mathf.Exp(0.02f * (rigidbody.velocity.magnitude * 3.6f)))) + 0.05f;
		steering = wheelMenu.dinput.GetSteer(sensitivity);
		throttle = wheelMenu.dinput.GetThrottle();	
		throttleInput = throttle;		
		brake = wheelMenu.dinput.GetBrake();
				
		// Handbrake
		handbrake = Mathf.Clamp01 ( handbrake + (Input.GetKey (KeyCode.Space)? Time.deltaTime: -Time.deltaTime) );
		
		// Gear shifting
		float shiftThrottleFactor = Mathf.Clamp01((Time.time - lastShiftTime)/shiftSpeed);
		drivetrain.throttle = throttle * shiftThrottleFactor;
		drivetrain.throttleInput = throttleInput;
		
		if(wheelMenu.dinput.ShiftUp())
		{
			if (!shiftingUp)
			{
				lastShiftTime = Time.time;
				shiftingUp = true;
				drivetrain.ShiftUp ();
			}
		}
		else shiftingUp = false;
		if(wheelMenu.dinput.ShiftDown ())
		{
			if (!shiftingDown)
			{
				lastShiftTime = Time.time;
				shiftingDown = true;
				drivetrain.ShiftDown ();
			}
		}
		else shiftingDown = false;

		// Apply inputs & Calculate/Send Force Feedback
		float Mz = 0f; 
		foreach(Wheel w in wheels)
		{
			w.brake = brake;
			w.handbrake = handbrake;
			w.steering = steering;
            if (w.name == "WheelFL" || this.name == "WheelFR")
            {
                Mz += CalcMz(w.normalForce * 0.001f, w.localVelo.x, w.grip);
            }
		}	
	    wheelMenu.dinput.SetForceCoordinate(Mz); 
		
        // ** End FFB Changes ** //
	}

    // ** FFB Calculates aligning moment  -- Reference http://www.racer.nl/reference/pacejka.htm
    float CalcMz(float Fz, float sideSlip, float grip)
    {
        float Mz;
        float B, C, D, E, Sh, Sv;
        float FzSquared;
        float camber = 0.02f;

        // Calculate derived coefficients
        FzSquared = Fz * Fz;
        C = c[0];
        D = (c[1] * FzSquared + c[2] * Fz) * grip;
        E = (c[7] * FzSquared + c[8] * Fz + c[9]) * (1.0f - c[10] * Mathf.Abs(camber));
        B = ((c[3] * FzSquared + c[4] * Fz) * (1 - c[6] * Mathf.Abs(camber)) * Mathf.Exp(-c[5] * Fz)) / (C * D);
        Sh = c[11] * camber + c[12] * Fz + c[13];
        Sv = (c[14] * FzSquared + c[15] * Fz) * camber + c[16] * Fz + c[17];

        Mz = D * Mathf.Sin(C * PseudoAtan(B * (1.0f - E) * (sideSlip + Sh) + E * PseudoAtan(B * (sideSlip + Sh)))) + Sv;
        return Mz * -1f;
    }

    float PseudoAtan(float x)
    {
        float absx = Mathf.Abs(x);
        return x * (1f + 1.1f * absx) / (1f + 2 * (1.6f * absx + 1.1f * x * x) / Mathf.PI);
    }

 
	// Debug GUI. Disable when not needed.
	void OnGUI ()
	{
		GUI.Label (new Rect(0,60,100,200),"km/h: "+rigidbody.velocity.magnitude * 3.6f);
		tractionControl = GUI.Toggle(new Rect(0,80,300,20), tractionControl, "Traction Control (bypassed by shift key)");
	}
}
